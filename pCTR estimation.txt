import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

############## IMPORTING FILES ################
train = pd.read_csv("train.csv")
validation = pd.read_csv("validation.csv")
################################################
validationBidid = validation['bidid'].tolist()

############## FEATURE ENGINEERING #############
# Negative downsample to try and balance click/non-clicks better in the training data
print("negative downsampling")
from sklearn.utils import resample
majority = train[train.click == 0]
minority = train[train.click == 1]
majorityResampled = resample(majority, replace=False, n_samples=400000, random_state=12)
train = pd.concat([minority, majorityResampled])

fullData = pd.concat([train, validation]).reset_index(drop=True)

# Need to know for the index to split the validation/train data after feature engineering
trainLength = len(train)
del train
del validation

# Split useragent into os and broswer
newData = pd.DataFrame(fullData.useragent.str.split('_').tolist(), columns=['os', 'browser'])
fullData = pd.concat([fullData, newData], axis=1)

# Columns not wanted for the CTR prediction
columnsToDrop = ['bidid', 'userid', 'IP', 'url', 'urlid', 'slotid', 'keypage', 'bidprice',
                 'payprice', 'domain', 'useragent']
fullData = fullData.drop(columnsToDrop, axis=1)

# Create dummy variables for these columns
columnsForDummies = ['weekday', 'hour', 'city', 'region', 'slotwidth', 'slotheight', 'advertiser', 'creative',
                     'slotprice', 'adexchange', 'slotformat', 'slotvisibility', 'os', 'browser']

print("creating fullData dummmies")
for i in columnsForDummies:
    print("completing: " + i)
    dummies = pd.get_dummies(fullData[i], prefix=i)
    joined = pd.concat([fullData, dummies], axis=1)
    fullData = joined.drop(i, axis=1)

print("completing: usertag")
fullData['usertag'].fillna(value="null", inplace=True)
usertags = fullData.usertag.str.split(',').tolist()
usertagDf = pd.DataFrame(usertags)
usetags = 0
usertagDummies = pd.get_dummies(usertagDf, prefix='usertag')
usertagDf = 0
usertagDummies = usertagDummies.groupby(usertagDummies.columns, axis=1).sum()
fullData = pd.concat([fullData, usertagDummies], axis=1)
fullData = fullData.drop('usertag', axis=1)
print("finished dummies")
usertagDummies = 0

# Split the train and validation data
train = fullData[0:trainLength]
validation = fullData[trainLength:]
fullData = 0

# Split the features and target variable for training and validation sets
print("X/y preparation")
X_train = train.drop('click', axis=1)
y_train = train['click']
X_validation = validation.drop('click', axis=1)
y_validation = validation['click']
train = 0
validation = 0
################################################

from sklearn.linear_model import LogisticRegression
from sklearn.metrics import roc_auc_score
from sklearn.ensemble import RandomForestClassifier
from sklearn.tree import DecisionTreeClassifier

print("fitting optimum logistic")
logisticModel = LogisticRegression(class_weight="balanced", C=0.001)
logisticModel.fit(X_train, y_train)
prediction = logisticModel.predict(X_validation)
predictionProba = logisticModel.predict_proba(X_validation)
print("finished fitting")

def recalibrate(pr):
    return pr/(pr+((1-pr)/0.16))

predictionData=pd.DataFrame()
predictList = predictionProba[:, 1].tolist()

recaList = []
for i in predictList:
    new = recalibrate(i)
    recaList.append(new)

predictionData['predictions'] = recaList
predictionData['bidid'] = validationBidid
predictionData.to_csv("logistic_click_predictions.csv", index=False)


# Decision Tree
print("decision tree")
treeModel = DecisionTreeClassifier(max_depth=10, class_weight="balanced")
treeModel.fit(X_train, y_train)
predictionProba = treeModel.predict_proba(X_validation)

predictionData=pd.DataFrame()
predictList = predictionProba[:, 1].tolist()

recaList = []
for i in predictList:
    new = recalibrate(i)
    recaList.append(new)

predictionData['predictions'] = recaList
predictionData['bidid'] = validationBidid
predictionData.to_csv("tree_click_predictions.csv", index=False)


# Random forest
print("random forest")
rfModel = RandomForestClassifier(n_estimators=100, min_samples_leaf=20, n_jobs=-1, class_weight="balanced")
rfModel.fit(X_train, y_train)
predictionProba = rfModel.predict_proba(X_validation)

predictionData=pd.DataFrame()
predictList = predictionProba[:, 1].tolist()

recaList = []
for i in predictList:
    new = recalibrate(i)
    recaList.append(new)

predictionData['predictions'] = recaList
predictionData['bidid'] = validationBidid
predictionData.to_csv("rf_click_predictions.csv", index=False)


pctrFiles = ["rf_click_predictions.csv", "tree_click_predictions.csv", "logistic_click_predictions.csv"]

print("click statistics")
df = pd.read_csv("validation.csv")
for file in pctrFiles:
    preds = pd.read_csv(file)
    predList = preds['predictions'].tolist()
    clickList = df['click'].tolist()
    payList = df['payprice'].tolist()

    clickCostPredList = []

    for i in range(0, len(preds) - 1):
        click = clickList[i]
        pay = payList[i]
        pred = predList[i]
        tempTuple = (click, pay, pred)
        clickCostPredList.append(tempTuple)

    #  Finding the optimum base bid
    avgCTR = df['click'].sum() / len(df) * 100
    budget = 6250
    linearBidList = []
    for constant in range(25, 150):
        impressions = 0
        clicks = 0
        totalPrice = 0
        endIndex = 0
        final = 0
        for imp in clickCostPredList:
            bidprice = constant * (imp[2] / avgCTR)
            if bidprice > imp[1]:
                if totalPrice + (imp[1] / 1000) <= 6250:
                    final = endIndex
                    impressions = impressions + 1
                    totalPrice = totalPrice + (imp[1] / 1000)
                    clicks = clicks + imp[0]
                else:
                    continue

        CTR = clicks / impressions * 100
        CPM = (totalPrice / impressions) * 1000

        if clicks == 0:
            CPC = 0
        else:
            CPC = totalPrice / clicks

        linearBidList.append([constant, impressions, clicks, CTR, totalPrice, CPM, final, CPC])

    linearData = pd.DataFrame(linearBidList, columns=['constant', 'impressions', 'clicks', 'CTR', 'totalPrice', 'CPM',
                                                      'final', 'CPC'])

    print(str(file) + " top 5 by clicks")
    linearData.sort_values('clicks', ascending=False, inplace=True)
    print(linearData.head(5))
